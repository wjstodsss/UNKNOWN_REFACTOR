<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.unknown.mapper.MemberMapper">

	<!-- 회원가입 -->
	<insert id="memberJoin">
		INSERT INTO tbl_member (
		memberId, memberPw,
		memberName, memberPhone, memberMail,
		memberAddr1, memberAddr2,
		memberAddr3,
		adminCk, regDate, point, suspended, withdrawal
		)
		VALUES (
		#{memberId, jdbcType=VARCHAR}, #{memberPw, jdbcType=VARCHAR},
		#{memberName, jdbcType=VARCHAR}, #{memberPhone, jdbcType=VARCHAR},
		#{memberMail, jdbcType=VARCHAR}, #{memberAddr1, jdbcType=VARCHAR},
		#{memberAddr2, jdbcType=VARCHAR}, #{memberAddr3, jdbcType=VARCHAR},
		0,
		sysdate, 5000, 'N', 'N'
		)
	</insert>

	<!-- 회원정보 수정 -->
	<update id="memberUpdate"
		parameterType="com.unknown.model.MemberVO">
		<!-- 로그 추가 -->
		<selectKey keyProperty="memberId" resultType="String">
			SELECT memberId FROM tbl_member WHERE memberId = #{memberId}
		</selectKey>
		UPDATE tbl_member
		<set>
			<if test="memberPw != null and memberPw != ''">
				memberPw = #{memberPw, jdbcType=VARCHAR},
			</if>
			memberName = #{memberName, jdbcType=VARCHAR},
			memberPhone = #{memberPhone, jdbcType=VARCHAR},
			memberMail = #{memberMail, jdbcType=VARCHAR},
			memberAddr1 = #{memberAddr1, jdbcType=VARCHAR},
			memberAddr2 = #{memberAddr2, jdbcType=VARCHAR},
			memberAddr3 = #{memberAddr3, jdbcType=VARCHAR}
		</set>
		WHERE memberId = #{memberId, jdbcType=VARCHAR}
	</update>



	<!-- Kakao 로그인 정보 저장 쿼리 -->
	<insert id="saveKakaoUserInfo"
		parameterType="com.unknown.model.KakaoVO">
		INSERT INTO kakao_table (k_name, k_email)
		VALUES
		(#{k_name}, #{k_email})
	</insert>

	<!-- 회원 ID로 회원 정보 조회 -->
	<select id="getMemberById"
		resultType="com.unknown.model.MemberVO">
		SELECT * FROM tbl_member WHERE memberId = #{memberId}
	</select>

	<!-- 이메일을 기준으로 회원 정보 조회 -->
	<select id="getMemberByEmail" parameterType="String"
		resultType="com.unknown.model.MemberVO">
		SELECT * FROM tbl_member WHERE memberMail = #{memberMail}
	</select>

	<!-- 이메일을 기준으로 카카오 사용자 정보 조회 -->
	<select id="getKakaoUserByEmail"
		resultType="com.unknown.model.KakaoVO">
		SELECT * FROM kakao_table WHERE k_email = #{k_email}
	</select>

	<!-- 이메일 중복 확인을 위한 카운트 -->
	<select id="checkEmailDuplicate" resultType="int"
		parameterType="com.unknown.model.MemberVO">
		SELECT COUNT(*) FROM tbl_member WHERE memberMail =
		#{memberMail}
	</select>


	<!-- 아이디 중복검사 -->
	<select id="idCheck" resultType="int">
		SELECT count(*) FROM tbl_member
		WHERE memberId = #{memberId, jdbcType=VARCHAR}
	</select>

	<!-- 로그인 -->
	<select id="memberLogin" resultType="com.unknown.model.MemberVO">
		SELECT
		memberId,
		memberPw,
		memberName,
		memberPhone,
		memberMail,
		memberAddr1,
		memberAddr2,
		memberAddr3,
		adminCk,
		regDate,
		point,
		suspended,
		withdrawal
		FROM
		tbl_member
		WHERE
		memberId = #{memberId, jdbcType=VARCHAR}
		AND withdrawal = 'N'
	</select>

	<!-- 주문자 정보 -->
	<select id="getMemberInfo"
		resultType="com.unknown.model.MemberVO">
		SELECT memberId, memberName, memberPhone, memberMail,
		memberAddr1, memberAddr2, memberAddr3, regDate, point
		FROM tbl_member
		WHERE memberId =
		#{memberId, jdbcType=VARCHAR}
	</select>

	<!-- 회원 탈퇴 -->
	<update id="memberWithdraw" parameterType="String">
		UPDATE tbl_member SET
		withdrawal = 'Y' WHERE memberId = #{memberId}
	</update>

	<!-- 회원 탈퇴 여부 확인 -->
	<select id="isMemberWithdrawn" parameterType="String"
		resultType="java.lang.Boolean">
		SELECT
		CASE
		WHEN withdrawal = 'Y' THEN 1
		ELSE 0
		END AS
		isWithdrawn
		FROM tbl_member
		WHERE memberId = #{memberId}
	</select>

	<!-- 아이디 찾기 -->
	<select id="findId" resultType="com.unknown.model.MemberVO">
		select * from tbl_member where
		memberMail = #{memberMail}
	</select>

	<select id="findIdCheck" resultType="int">
		select count(*) from
		tbl_member where memberMail = #{memberMail}
	</select>

	<!-- 이메일을 기준으로 비밀번호 업데이트 -->
	<update id="updatePasswordByEmail" parameterType="map">
		UPDATE
		tbl_member
		SET memberPw = #{newPassword}
		WHERE memberMail =
		#{memberMail}
	</update>

</mapper>